(function (c) { var d = {}; function a(e) { return plupload.translate(e) || e } function b(f, e) { e.contents().each(function (g, h) { h = c(h); if (!h.is(".plupload")) { h.remove() } }); e.prepend('<div class="plupload_wrapper plupload_scroll"><div id="' + f + '_container" class="plupload_container"><div class="plupload"><div class="plupload_header"><div class="plupload_header_content"><div class="plupload_header_title">' + a("选择档案") + '</div><div class="plupload_header_text">' + a("加入档案后点选开始上传键.") + '</div></div></div><div class="plupload_content"><div class="plupload_filelist_header"><div class="plupload_file_name">' + a("档案名称") + '</div><div class="plupload_file_action">&nbsp;</div><div class="plupload_file_status"><span>' + a("状态") + '</span></div><div class="plupload_file_size">' + a("大小") + '</div><div class="plupload_clearer">&nbsp;</div></div><ul id="' + f + '_filelist" class="plupload_filelist"></ul><div class="plupload_filelist_footer"><div class="plupload_file_name"><div class="plupload_buttons"><a href="#" class="plupload_button plupload_add" id="' + f + '_browse">' + a("加入档案") + '</a><a href="#" class="plupload_button plupload_start">' + a("开始上传") + '</a></div><span class="plupload_upload_status"></span></div><div class="plupload_file_action"></div><div class="plupload_file_status"><span class="plupload_total_status">0%</span></div><div class="plupload_file_size"><span class="plupload_total_file_size">0 b</span></div><div class="plupload_progress"><div class="plupload_progress_container"><div class="plupload_progress_bar"></div></div></div><div class="plupload_clearer">&nbsp;</div></div></div></div></div><input type="hidden" id="' + f + '_count" name="' + f + '_count" value="0" /></div>') } c.fn.pluploadQueue = function (e) { if (e) { this.each(function () { var l, k, m, g; k = c(this); m = k.attr("id"); if (!m) { m = plupload.guid(); k.attr("id", m) } g = k.html(); b(m, k); l = new plupload.Uploader(c.extend({ dragdrop: true, browse_button: m + "_browse", container: m }, e)); d[m] = l; function j(n) { var p; if (n.status == plupload.DONE) { p = "plupload_done" } if (n.status == plupload.FAILED) { p = "plupload_failed" } if (n.status == plupload.QUEUED) { p = "plupload_delete" } if (n.status == plupload.UPLOADING) { p = "plupload_uploading" } var o = c("#" + n.id).attr("class", p).find("a").css("display", "block"); if (n.hint) { o.attr("title", n.hint) } } function f() { c("span.plupload_total_status", k).html(l.total.percent + "%"); c("div.plupload_progress_bar", k).css("width", l.total.percent + "%"); c("span.plupload_upload_status", k).html(a("Uploaded %d/%d files").replace(/%d\/%d/, l.total.uploaded + "/" + l.files.length)) } function h() { var o = c("ul.plupload_filelist", k).html(""), p = 0, n; c.each(l.files, function (r, q) { n = ""; if (q.status == plupload.DONE) { if (q.target_name) { n += '<input type="hidden" name="' + m + "_" + p + '_tmpname" value="' + plupload.xmlEncode(q.target_name) + '" />' } n += '<input type="hidden" name="' + m + "_" + p + '_name" value="' + plupload.xmlEncode(q.name) + '" />'; n += '<input type="hidden" name="' + m + "_" + p + '_status" value="' + (q.status == plupload.DONE ? "done" : "failed") + '" />'; p++; c("#" + m + "_count").val(p) } o.append('<li id="' + q.id + '"><div class="plupload_file_name"><span>' + q.name + '</span></div><div class="plupload_file_action"><a href="#"></a></div><div class="plupload_file_status">' + q.percent + '%</div><div class="plupload_file_size">' + plupload.formatSize(q.size) + '</div><div class="plupload_clearer">&nbsp;</div>' + n + "</li>"); j(q); c("#" + q.id + ".plupload_delete a").click(function (s) { c("#" + q.id).remove(); l.removeFile(q); s.preventDefault() }) }); c("span.plupload_total_file_size", k).html(plupload.formatSize(l.total.size)); if (l.total.queued === 0) { c("span.plupload_add_text", k).html(a("Add Files")) } else { c("span.plupload_add_text", k).html(a("%d files queued").replace(/%d/, l.total.queued)) } c("a.plupload_start", k).toggleClass("plupload_disabled", l.files.length == (l.total.uploaded + l.total.failed)); o[0].scrollTop = o[0].scrollHeight; f(); if (!l.files.length && l.features.dragdrop && l.settings.dragdrop) { c("#" + m + "_filelist").append('<li class="plupload_droptext">' + a("拖曳至此") + "</li>") } if (l.files.length == e.max_files) { o.append("<li>已达单次档案上传数量限制(" + l.files.length + ")</li>") } } function i() { delete d[m]; l.destroy(); k.html(g); l = k = g = null } l.bind("UploadFile", function (n, o) { c("#" + o.id).addClass("plupload_current_file") }); l.bind("Init", function (n, o) { if (!e.unique_names && e.rename) { k.on("click", "#" + m + "_filelist div.plupload_file_name span", function (u) { var s = c(u.target), q, t, p, r = ""; q = n.getFile(s.parents("li")[0].id); p = q.name; t = /^(.+)(\.[^.]+)$/.exec(p); if (t) { p = t[1]; r = t[2] } s.hide().after('<input type="text" />'); s.next().val(p).focus().blur(function () { s.show().next().remove() }).keydown(function (w) { var v = c(this); if (w.keyCode == 13) { w.preventDefault(); q.name = v.val() + r; s.html(q.name); v.blur() } }) }) } if (n.settings.dragdrop) { n.settings.drop_element = m + "_filelist" } c("#" + m + "_container").attr("title", "Using runtime: " + o.runtime); c("a.plupload_start", k).click(function (p) { if (!c(this).hasClass("plupload_disabled")) { l.start() } p.preventDefault() }); c("a.plupload_stop", k).click(function (p) { p.preventDefault(); l.stop() }); c("a.plupload_start", k).addClass("plupload_disabled") }); l.bind("Error", function (n, q) { var o = q.file, p; if (o) { p = q.message; if (q.details) { p += " (" + q.details + ")" } if (q.code == plupload.FILE_SIZE_ERROR) { alert(a("Error: File too large:") + " " + o.name) } if (q.code == plupload.FILE_EXTENSION_ERROR) { alert(a("Error: Invalid file extension:") + " " + o.name) } o.hint = p; c("#" + o.id).attr("class", "plupload_failed").find("a").css("display", "block").attr("title", p) } if (q.code === plupload.INIT_ERROR) { setTimeout(function () { i() }, 1) } }); l.bind("PostInit", function (n) { if (n.settings.dragdrop && n.features.dragdrop) { c("#" + m + "_filelist").append('<li class="plupload_droptext">' + a("拖曳档案至此.") + "</li>") } }); l.init(); l.bind("StateChanged", function () { if (l.state === plupload.STARTED) { c("li.plupload_delete a,div.plupload_buttons", k).hide(); c("span.plupload_upload_status,div.plupload_progress,a.plupload_stop", k).css("display", "block"); c("span.plupload_upload_status", k).html("Uploaded " + l.total.uploaded + "/" + l.files.length + " files"); if (e.multiple_queues) { c("span.plupload_total_status,span.plupload_total_file_size", k).show() } } else { h(); c("a.plupload_stop,div.plupload_progress", k).hide(); c("a.plupload_delete", k).css("display", "block"); if (e.multiple_queues && l.total.uploaded + l.total.failed == l.files.length) { c(".plupload_buttons,.plupload_upload_status", k).css("display", "inline"); c(".plupload_start", k).addClass("plupload_disabled"); c("span.plupload_total_status,span.plupload_total_file_size", k).hide() } } }); l.bind("QueueChanged", h); l.bind("FileUploaded", function (n, o) { j(o) }); l.bind("UploadProgress", function (n, o) { c("#" + o.id + " div.plupload_file_status", k).html(o.percent + "%"); j(o); f() }); if (e.setup) { e.setup(l) } }); return this } else { return d[c(this[0]).attr("id")] } } })(jQuery);