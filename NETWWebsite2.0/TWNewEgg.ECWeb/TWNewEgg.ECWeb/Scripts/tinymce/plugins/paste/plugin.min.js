(function (e, t) { "use strict"; function r(e, t) { var r, i = []; for (var s = 0; s < e.length; ++s) { r = n[e[s]] || o(e[s]); if (!r) { throw "module definition dependecy not found: " + e[s] } i.push(r) } t.apply(null, i) } function i(e, i, s) { if (typeof e !== "string") { throw "invalid module definition, module id must be defined and be a string" } if (i === t) { throw "invalid module definition, dependencies must be specified" } if (s === t) { throw "invalid module definition, definition function must be specified" } r(i, function () { n[e] = s.apply(null, arguments) }) } function s(e) { return !!n[e] } function o(t) { var n = e; var r = t.split(/[.\/]/); for (var i = 0; i < r.length; ++i) { if (!n[r[i]]) { return } n = n[r[i]] } return n } function u(r) { for (var i = 0; i < r.length; i++) { var s = e; var o = r[i]; var u = o.split(/[.\/]/); for (var a = 0; a < u.length - 1; ++a) { if (s[u[a]] === t) { s[u[a]] = {} } s = s[u[a]] } s[u[u.length - 1]] = n[o] } } var n = {}; i("tinymce/pasteplugin/Clipboard", ["tinymce/Env", "tinymce/util/Tools", "tinymce/util/VK"], function (e, t, n) { function r() { return !e.gecko && ("ClipboardEvent" in window || e.webkit && "FocusEvent" in window) } return function (i) { function u() { return (new Date).getTime() } function a(e) { return n.metaKeyPressed(e) && e.keyCode == 86 || e.shiftKey && e.keyCode == 45 } function f(e) { return e.innerText || e.textContent } function l() { return u() - o < 100 || s.pasteFormat == "text" } function c(e, n) { t.each(n, function (t) { if (t.constructor == RegExp) { e = e.replace(t, "") } else { e = e.replace(t[0], t[1]) } }); return e } function h(t) { var n = i.fire("PastePreProcess", { content: t }); t = n.content; t = t.replace(/class=\"[^\"]+\"/g, ""); if (!i.settings.paste_data_images) { t = t.replace(/<img src=\"data:image[^>]+>/g, "") } if (i.settings.paste_remove_styles || i.settings.paste_remove_styles_if_webkit !== false && e.webkit) { t = t.replace(/ style=\"[^\"]+\"/g, "") } if (!n.isDefaultPrevented()) { i.insertContent(t) } } function p(e) { e = i.dom.encode(e).replace(/\r\n/g, "\n"); var t = i.dom.getParent(i.selection.getStart(), i.dom.isBlock); if (t && /^(PRE|DIV)$/.test(t.nodeName) || !i.settings.forced_root_block) { e = c(e, [[/\n/g, "<br>"]]) } else { e = c(e, [[/\n\n/g, "</p><p>"], [/^(.*<\/p>)(<p>)$/, "<p>$1"], [/\n/g, "<br />"]]) } var n = i.fire("PastePreProcess", { content: e }); if (!n.isDefaultPrevented()) { i.insertContent(n.content) } } function d() { var e = i.dom.getViewPort().y; var t = i.dom.add(i.getBody(), "div", { contentEditable: false, "data-mce-bogus": "1", style: "position: absolute; top: " + e + "px; left: 0; width: 1px; height: 1px; overflow: hidden" }, '<div contentEditable="true" data-mce-bogus="1">X</div>'); i.dom.bind(t, "beforedeactivate focusin focusout", function (e) { e.stopPropagation() }); return t } function v(e) { i.dom.unbind(e); i.dom.remove(e) } var s = this, o; i.on("keydown", function (e) { if (n.metaKeyPressed(e) && e.shiftKey && e.keyCode == 86) { o = u() } }); if (r()) { i.on("paste", function (e) { function n(e, n) { for (var r = 0; r < t.types.length; r++) { if (t.types[r] == e) { n(t.getData(e)); return true } } } var t = e.clipboardData; if (t) { e.preventDefault(); if (l()) { if (!n("text/plain", p)) { n("text/html", h) } } else { if (!n("text/html", h)) { n("text/plain", p) } } } }) } else { if (e.ie) { var m = 0; i.on("keydown", function (e) { if (a(e) && !e.isDefaultPrevented()) { e.stopImmediatePropagation(); var t = d(); m = u(); i.dom.bind(t, "paste", function () { setTimeout(function () { i.selection.setRng(n); v(t); if (l()) { p(f(t.firstChild)) } else { h(t.firstChild.innerHTML) } }, 0) }); var n = i.selection.getRng(); t.firstChild.focus(); t.firstChild.innerText = "" } }); i.on("init", function () { var e = i.dom; i.dom.bind(i.getBody(), "paste", function (t) { if (u() - m > 100) { var n, r = d(); t.preventDefault(); e.bind(r, "paste", function (e) { e.stopPropagation(); n = true }); var s = i.selection.getRng(); var o = e.doc.body.createTextRange(); o.moveToElementText(r.firstChild); o.execCommand("Paste"); v(r); if (!n) { i.windowManager.alert("Please use Ctrl+V/Cmd+V keyboard shortcuts to paste contents."); return } i.selection.setRng(s); if (l()) { p(f(r.firstChild)) } else { h(r.firstChild.innerHTML) } } }) }) } else { i.on("init", function () { i.dom.bind(i.getBody(), "paste", function (e) { var t = i.getDoc(); e.preventDefault(); if (e.clipboardData || t.dataTransfer) { p((e.clipboardData || t.dataTransfer).getData("Text")); return } e.preventDefault(); i.windowManager.alert("Please use Ctrl+V/Cmd+V keyboard shortcuts to paste contents.") }) }); i.on("keydown", function (t) { if (a(t) && !t.isDefaultPrevented()) { t.stopImmediatePropagation(); var n = d(); var r = i.selection.getRng(); if (e.webkit && i.inline) { n.contentEditable = true } i.selection.select(n, true); i.dom.bind(n, "paste", function (e) { e.stopPropagation(); setTimeout(function () { v(n); i.lastRng = r; i.selection.setRng(r); var e = n.firstChild; if (e.lastChild && e.lastChild.nodeName == "BR") { e.removeChild(e.lastChild) } if (l()) { p(f(e)) } else { h(e.innerHTML) } }, 0) }) } }) } if (!i.settings.paste_data_images) { i.on("drop", function (e) { var t = e.dataTransfer; if (t && t.files && t.files.length > 0) { e.preventDefault() } }) } } if (i.paste_block_drop) { i.on("dragend dragover draggesture dragdrop drop drag", function (e) { e.preventDefault(); e.stopPropagation() }) } this.paste = h; this.pasteText = p } }); i("tinymce/pasteplugin/WordFilter", ["tinymce/util/Tools", "tinymce/html/DomParser", "tinymce/html/Schema", "tinymce/html/Serializer", "tinymce/html/Node"], function (e, t, n, r, i) { return function (s) { var o = e.each; s.on("PastePreProcess", function (u) { function c(e) { o(e, function (e) { if (e.constructor == RegExp) { a = a.replace(e, "") } else { a = a.replace(e[0], e[1]) } }) } function h(e) { function s(e, s, o, u) { var a = e._listLevel || r; if (a != r) { if (a < r) { if (t) { t = t.parent.parent } } else { n = t; t = null } } if (!t || t.name != o) { n = n || t; t = new i(o, 1); if (u > 1) { t.attr("start", "" + u) } e.wrap(t) } else { t.append(e) } e.name = "li"; s.value = ""; var f = s.next; if (f && f.type == 3) { f.value = f.value.replace(/^\u00a0+/, "") } if (a > r && n) { n.lastChild.append(t) } r = a } var t, n, r = 1; var o = e.getAll("p"); for (var u = 0; u < o.length; u++) { e = o[u]; if (e.name == "p" && e.firstChild) { var a = ""; var f = e.firstChild; while (f) { a = f.value; if (a) { break } f = f.firstChild } if (/^\s*[\u2022\u00b7\u00a7\u00d8o\u25CF]\s*$/.test(a)) { s(e, f, "ul"); continue } if (/^\s*\w+\./.test(a)) { var l = /([0-9])\./.exec(a); var c = 1; if (l) { c = parseInt(l[1], 10) } s(e, f, "ol", c); continue } t = null } } } function p(t, n) { if (t.name === "p") { var r = /mso-list:\w+ \w+([0-9]+)/.exec(n); if (r) { t._listLevel = parseInt(r[1], 10) } } if (s.getParam("paste_retain_style_properties", "none")) { var i = ""; e.each(s.dom.parseStyle(n), function (e, t) { switch (t) { case "horiz-align": t = "text-align"; return; case "vert-align": t = "vertical-align"; return; case "font-color": case "mso-foreground": t = "color"; return; case "mso-background": case "mso-highlight": t = "background"; break } if (f == "all" || l && l[t]) { i += t + ":" + e + ";" } }); if (i) { return i } } return null } var a = u.content, f, l; f = s.settings.paste_retain_style_properties; if (f) { l = e.makeMap(f) } if (s.settings.paste_enable_default_filters === false) { return } if (/class="?Mso|style="[^"]*\bmso-|style='[^'']*\bmso-|w:WordDocument/i.test(u.content)) { u.wordContent = true; c([/<!--[\s\S]+?-->/gi, /<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|img|meta|link|style|\w:\w+)(?=[\s\/>]))[^>]*>/gi, [/<(\/?)s>/gi, "<$1strike>"], [/&nbsp;/gi, " "], [/<span\s+style\s*=\s*"\s*mso-spacerun\s*:\s*yes\s*;?\s*"\s*>([\s\u00a0]*)<\/span>/gi, function (e, t) { return t.length > 0 ? t.replace(/./, " ").slice(Math.floor(t.length / 2)).split("").join(" ") : "" }]]); var d = new n({ valid_elements: "@[style],-strong/b,-em/i,-span,-p,-ol,-ul,-li,-h1,-h2,-h3,-h4,-h5,-h6,-table," + "-tr,-td[colspan|rowspan],-th,-thead,-tfoot,-tbody,-a[!href],sub,sup,strike" }); var v = new t({}, d); v.addAttributeFilter("style", function (e) { var t = e.length, n; while (t--) { n = e[t]; n.attr("style", p(n, n.attr("style"))); if (n.name == "span" && !n.attributes.length) { n.unwrap() } } }); var m = v.parse(a); h(m); u.content = (new r({}, d)).serialize(m) } }) } }); i("tinymce/pasteplugin/Quirks", ["tinymce/Env", "tinymce/util/Tools"], function (e, t) { "use strict"; return function (n) { function i(e) { n.on("PastePreProcess", function (t) { t.content = e(t.content) }) } function s(e, n) { t.each(n, function (t) { if (t.constructor == RegExp) { e = e.replace(t, "") } else { e = e.replace(t[0], t[1]) } }); return e } function o(e) { e = s(e, [/^[\s\S]*<!--StartFragment-->|<!--EndFragment-->[\s\S]*$/g, [/<span class="Apple-converted-space">\u00a0<\/span>/g, " "], /<br>$/]); return e } function u(e) { if (!r) { var i = []; t.each(n.schema.getBlockElements(), function (e, t) { i.push(t) }); r = new RegExp("(?:<br>&nbsp;[\\s\\r\\n]+|<br>)*(<\\/?(" + i.join("|") + ")[^>]*>)(?:<br>&nbsp;[\\s\\r\\n]+|<br>)*", "g") } e = s(e, [[r, "$1"]]); e = s(e, [[/<br><br>/g, "<BR><BR>"], [/<br>/g, " "], [/<BR><BR>/g, "<br>"]]); return e } var r; if (e.webkit) { i(o) } if (e.ie) { i(u) } } }); i("tinymce/pasteplugin/Plugin", ["tinymce/PluginManager", "tinymce/pasteplugin/Clipboard", "tinymce/pasteplugin/WordFilter", "tinymce/pasteplugin/Quirks"], function (e, t, n, r) { var i; e.add("paste", function (e) { function u() { if (o.pasteFormat == "text") { this.active(false); o.pasteFormat = "html" } else { o.pasteFormat = "text"; this.active(true); if (!i) { e.windowManager.alert("Paste is now in plain text mode. Contents will now " + "be pasted as plain text until you toggle this option off."); i = true } } } var s = this, o; s.clipboard = o = new t(e); s.quirks = new r(e); s.wordFilter = new n(e); if (e.settings.paste_as_text) { s.clipboard.pasteFormat = "text" } e.addCommand("mceInsertClipboardContent", function (e, t) { if (t.content) { s.clipboard.paste(t.content) } if (t.text) { s.clipboard.pasteText(t.text) } }); e.addButton("pastetext", { icon: "pastetext", tooltip: "Paste as text", onclick: u, active: s.clipboard.pasteFormat == "text" }); e.addMenuItem("pastetext", { text: "Paste as text", selectable: true, active: o.pasteFormat, onclick: u }) }) }); u(["tinymce/pasteplugin/Clipboard", "tinymce/pasteplugin/WordFilter", "tinymce/pasteplugin/Quirks", "tinymce/pasteplugin/Plugin"]) })(this)