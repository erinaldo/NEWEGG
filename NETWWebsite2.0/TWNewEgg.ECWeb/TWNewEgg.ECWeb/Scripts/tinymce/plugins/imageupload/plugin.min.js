tinymce.PluginManager.add("imageupload", function (e) { function t(e, t) { function r(e, r) { n.parentNode.removeChild(n); t({ width: e, height: r }) } var n = document.createElement("img"); n.onload = function () { r(n.clientWidth, n.clientHeight) }; n.onerror = function () { r() }; n.src = e; var i = n.style; i.visibility = "hidden"; i.position = "fixed"; i.bottom = i.left = 0; i.width = i.height = "auto"; document.body.appendChild(n) } function n(t) { return function () { var n = e.settings.image_list; if (typeof n == "string") { tinymce.util.XHR.send({ url: n, success: function (e) { t(tinymce.util.JSON.parse(e)) } }) } else { t(n) } } } function r(n, r) { function c() { var e = [{ text: "None", value: "" }]; tinymce.each(n, function (t) { e.push({ text: t.text || t.title, value: t.value || t.url, menu: t.menu }) }); return e } function h(e) { var t, n, r, s; t = i.find("#width")[0]; n = i.find("#height")[0]; r = t.value(); s = n.value(); if (i.find("#constrain")[0].checked() && a && f && r && s) { if (e.control == t) { s = Math.round(r / a * s); n.value(s) } else { r = Math.round(s / f * r); t.value(r) } } a = r; f = s } function p() { function t(t) { function r() { t.onload = t.onerror = null; e.selection.select(t); e.nodeChanged() } t.onload = function () { if (!n.width && !n.height) { o.setAttribs(t, { width: t.clientWidth, height: t.clientHeight }) } r() }; t.onerror = r } var n = i.toJSON(); if (n.width === "") { n.width = null } if (n.height === "") { n.height = null } if (n.style === "") { n.style = null } n = { src: n.src, alt: n.alt, width: n.width, height: n.height, style: n.style }; e.undoManager.transact(function () { if (!n.src) { if (u) { o.remove(u); e.nodeChanged() } return } if (!u) { n.id = "__mcenew"; e.selection.setContent(o.createHTML("img", n)); u = o.get("__mcenew"); o.setAttrib(u, "id", null) } else { o.setAttribs(u, n) } t(u) }) } function d(e) { if (e) { e = e.replace(/px$/, "") } return e } function v() { t(this.value(), function (e) { if (e.width && e.height) { a = e.width; f = e.height; i.find("#width").value(a); i.find("#height").value(f) } }) } function g() { function e(e) { if (e.length > 0 && /^[0-9]+$/.test(e)) { e += "px" } return e } var t = i.toJSON(); var n = o.parseStyle(t.style); o.setAttrib(u, "style", ""); delete n.margin; n["margin-top"] = n["margin-bottom"] = e(t.vspace); n["margin-left"] = n["margin-right"] = e(t.hspace); n["border-width"] = e(t.border); i.find("#style").value(o.serializeStyle(o.parseStyle(o.serializeStyle(n)))) } var i, s, o = e.dom, u = e.selection.getNode(); var a, f, l; a = o.getAttrib(u, "width"); f = o.getAttrib(u, "height"); if (u.nodeName == "IMG" && !u.getAttribute("data-mce-object")) { s = { src: o.getAttrib(u, "src"), alt: o.getAttrib(u, "alt"), width: a, height: f } } else { u = null } if (n) { l = { name: "target", type: "listbox", label: "Image list", values: c(), onselect: function (e) { var t = i.find("#alt"); if (!t.value() || e.lastControl && t.value() == e.lastControl.text()) { t.value(e.control.text()) } i.find("#src").value(e.control.value()) } } } var m = [{ name: "file", type: "textbox", subtype: "file", label: "Upload", onchange: function () { editBlogArticle.selectFileCallback(this) } }, { name: "src", type: "filepicker", filetype: "image", label: "Source", autofocus: true, onchange: v, value: r }, l, { name: "alt", type: "textbox", label: "Image description" }, { type: "container", label: "Dimensions (px)", layout: "flex", direction: "row", align: "center", spacing: 5, items: [{ name: "width", type: "textbox", maxLength: 3, size: 3, onchange: h }, { type: "label", text: "x" }, { name: "height", type: "textbox", maxLength: 3, size: 3, onchange: h }] }]; if (e.settings.image_advtab) { if (u) { s.hspace = d(u.style.marginLeft || u.style.marginRight); s.vspace = d(u.style.marginTop || u.style.marginBottom); s.border = d(u.style.borderWidth); s.style = e.dom.serializeStyle(e.dom.parseStyle(e.dom.getAttrib(u, "style"))) } i = e.windowManager.open({ title: "Insert/edit image", data: s, bodyType: "tabpanel", body: [{ title: "General", type: "form", items: m }, { title: "Advanced", type: "form", pack: "start", items: [{ label: "Style", name: "style", type: "textbox" }, { type: "form", layout: "grid", packV: "start", columns: 2, padding: 0, alignH: ["left", "right"], defaults: { type: "textbox", maxWidth: 50, onchange: g }, items: [{ label: "Vertical space", name: "vspace" }, { label: "Horizontal space", name: "hspace" }, { label: "Border", name: "border" }] }] }], onSubmit: p }) } else { i = e.windowManager.open({ title: "Insert/edit image", data: s, body: m, onSubmit: p }) } } e.addButton("imageupload", { icon: "image", tooltip: "Insert/edit image", onclick: n(r), stateSelector: "img:not([data-mce-object])" }); e.addMenuItem("imageupload", { icon: "image", text: "Insert image", onclick: n(r), context: "insert", prependToContext: true }); e.addCommand("mceImageWindow", function () { r(true, editBlogArticle.ImageSrcToAdd) }) })